from django.core.management.base import BaseCommand
from django.db.models import Count
from const import ActionLog, ChatMembership

class Command(BaseCommand):
    help = '–°–∏–Ω—Ö—Ä–æ–Ω—ñ–∑—É—î mute_count —É ChatMembership –∑ ActionLog'

    def handle(self, *args, **options):
        self.stdout.write("üîÑ –ü–æ—á–∏–Ω–∞—î–º–æ —Å–∏–Ω—Ö—Ä–æ–Ω—ñ–∑–∞—Ü—ñ—é mute_count...")

        mute_actions = (
            ActionLog.objects
            .filter(action_type='user_muted', membership__isnull=False)
            .values('membership')
            .annotate(actual_mute_count=Count('id'))
        )

        updated = 0
        for entry in mute_actions:
            membership_id = entry['membership']
            actual_count = entry['actual_mute_count']

            try:
                membership = ChatMembership.objects.get(id=membership_id)
                if membership.mute_count != actual_count:
                    self.stdout.write(f"‚û°Ô∏è  –û–Ω–æ–≤–ª–µ–Ω–Ω—è ChatMembership ID {membership_id}: {membership.mute_count} ‚Üí {actual_count}")
                    membership.mute_count = actual_count
                    membership.save()
                    updated += 1
            except ChatMembership.DoesNotExist:
                self.stdout.write(f"‚ö†Ô∏è  ChatMembership ID {membership_id} –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ")

        self.stdout.write(f"‚úÖ –°–∏–Ω—Ö—Ä–æ–Ω—ñ–∑–∞—Ü—ñ—é –∑–∞–≤–µ—Ä—à–µ–Ω–æ. –û–Ω–æ–≤–ª–µ–Ω–æ –∑–∞–ø–∏—Å—ñ–≤: {updated}")