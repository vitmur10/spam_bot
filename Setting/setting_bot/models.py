from django.db import models
from django.contrib.auth.models import User
from django.utils.timezone import now
from asgiref.sync import sync_to_async
class Chats(models.Model):
    chat_id = models.IntegerField("–Ü–î —á–∞—Ç—É")
    name = models.CharField("–ù–∞–∑–≤–∞ —á–∞—Ç—É", max_length=70)

    def __str__(self):
        return "–ß–∞—Ç: {} ID {}".format(self.name, self.chat_id)

    class Meta:
        verbose_name = "–ß–∞—Ç–∏"
        verbose_name_plural = "–ß–∞—Ç–∏"


class ModerationSettings(models.Model):
    user = models.ForeignKey(User, on_delete=models.CASCADE, verbose_name="–ú–æ–¥–µ—Ä–∞—Ç–æ—Ä",
                             related_name="moderation_settings")

    mute_words = models.TextField("–°–ª–æ–≤–∞ –¥–ª—è –º—É—Ç–∞", help_text="–ü–µ—Ä–µ—Ä–∞—Ö–æ–≤—É–π—Ç–µ —á–µ—Ä–µ–∑ –∫–æ–º—É",
                                  default="—Å–ø–∞–º, —Ñ–ª—É–¥, –ª–æ—Ö, —Ä–µ–∫–ª–∞–º–∞, –ª–æ—Ö–æ—Ç—Ä–æ–Ω")
    kick_words = models.TextField("–°–ª–æ–≤–∞ –¥–ª—è –∫—ñ–∫—É", help_text="–ü–µ—Ä–µ—Ä–∞—Ö–æ–≤—É–π—Ç–µ —á–µ—Ä–µ–∑ –∫–æ–º—É",
                                  default="—Ç—Ä–æ–ª—ñ–Ω–≥, –¥–µ—Å—Ç—Ä—É–∫—Ç–∏–≤, –æ–±—Ä–∞–∑–∞")
    ban_words = models.TextField("–°–ª–æ–≤–∞ –¥–ª—è –±–∞–Ω—É", help_text="–ü–µ—Ä–µ—Ä–∞—Ö–æ–≤—É–π—Ç–µ —á–µ—Ä–µ–∑ –∫–æ–º—É",
                                 default="–Ω–∞—Ü–∏–∑–º, —Ä–∞—Å–∏–∑–º, —Ç–µ—Ä–æ—Ä–∏–∑–º, –¥–∏—Ç—è—á–µ –ø–æ—Ä–Ω–æ")

    max_mentions = models.IntegerField("–ú–∞–∫—Å. —Ç–µ–≥–∏", default=5)
    max_emojis = models.IntegerField("–ú–∞–∫—Å. –µ–º–æ–¥–∑—ñ", default=10)
    min_caps_length = models.IntegerField("–ú—ñ–Ω. –∫–∞–ø—Å", default=10)
    mute_time = models.IntegerField("–ß–∞—Å –º—É—Ç–∞ (—Ö–≤–∏–ª–∏–Ω–∏)", default=3600)

    delete_links = models.BooleanField("–í–∏–¥–∞–ª—è—Ç–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∑ –ø–æ—Å–∏–ª–∞–Ω–Ω—è–º–∏", default=True)
    delete_audio = models.BooleanField("–í–∏–¥–∞–ª—è—Ç–∏ –∞—É–¥—ñ–æ–∑–∞–ø–∏—Å–∏", default=False)
    delete_video = models.BooleanField("–í–∏–¥–∞–ª—è—Ç–∏ –≤—ñ–¥–µ–æ", default=False)
    delete_video_notes = models.BooleanField("–í–∏–¥–∞–ª—è—Ç–∏ –≤—ñ–¥–µ–æ–ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è", default=False)
    delete_stickers = models.BooleanField("–í–∏–¥–∞–ª—è—Ç–∏ —Å—Ç–∏–∫–µ—Ä–∏", default=False)
    delete_emojis = models.BooleanField("–í–∏–¥–∞–ª—è—Ç–∏ –∑–∞–Ω–∞–¥—Ç–æ –±–∞–≥–∞—Ç–æ –µ–º–æ–¥–∑—ñ", default=True)
    delete_chinese = models.BooleanField("–í–∏–¥–∞–ª—è—Ç–∏ –∫–∏—Ç–∞–π—Å—å–∫—ñ —ñ—î—Ä–æ–≥–ª—ñ—Ñ–∏", default=False)
    delete_rtl = models.BooleanField("–í–∏–¥–∞–ª—è—Ç–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∑ RTL —Å–∏–º–≤–æ–ª–∞–º–∏", default=False)
    delete_emails = models.BooleanField("–í–∏–¥–∞–ª—è—Ç–∏ email –∞–¥—Ä–µ—Å–∏", default=True)
    delete_referral_links = models.BooleanField("–í–∏–¥–∞–ª—è—Ç–∏ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ñ –ø–æ—Å–∏–ª–∞–Ω–Ω—è Telegram", default=True)

    emoji_list = models.TextField("–°–ø–∏—Å–æ–∫ –µ–º–æ–¥–∑—ñ", help_text="–ü–µ—Ä–µ—Ä–∞—Ö—É–π—Ç–µ –µ–º–æ–¥–∑—ñ –±–µ–∑ –ø—Ä–æ–±—ñ–ª—ñ–≤",
                                  default="üòÄüòÅüòÇü§£üòÉüòÑüòÖüòÜüòâüòäüòãüòéüòúüòùüòõü§™ü§©ü§Øü•≥üòáü•∞üòçüòò")

    def __str__(self):
        return f"–ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è {self.user.username}"

    class Meta:
        verbose_name = "–ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –º–æ–¥–µ—Ä–∞—Ü—ñ—ó"
        verbose_name_plural = "–ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –º–æ–¥–µ—Ä–∞—Ü—ñ—ó"


class Message(models.Model):
    message_id = models.BigIntegerField(unique=True, null=True, blank=True)
    chats_names = models.ForeignKey(Chats, on_delete=models.CASCADE)
    user_id = models.BigIntegerField(null=True, blank=True)  # ID –≤—ñ–¥–ø—Ä–∞–≤–Ω–∏–∫–∞
    username = models.CharField(max_length=255, null=True, blank=True)  # –Æ–∑–µ—Ä–Ω–µ–π–º –≤—ñ–¥–ø—Ä–∞–≤–Ω–∏–∫–∞
    first_name = models.CharField(max_length=255, null=True, blank=True)  # –Ü–º'—è –≤—ñ–¥–ø—Ä–∞–≤–Ω–∏–∫–∞
    timestamp = models.DateTimeField()  # –ß–∞—Å –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
    message_text = models.TextField()  # –¢–µ–∫—Å—Ç –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
    action = models.CharField(max_length=50, null=True, blank=True)  # –î—ñ—è –∑ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è–º (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥, "deleted", "muted", "banned")

    class Meta:
        verbose_name = "–ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è"
        verbose_name_plural = "–ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è"

    def __str__(self):
        return f"Chat {self.chats_names.name} | User {self.user_id} | {self.message_text[:30]} | Action: {self.action}"


    def chat_name(self):  # –î–æ–¥–∞—î–º–æ –º–µ—Ç–æ–¥
        return self.chats_names.name if self.chats_names else "–ë–µ–∑ —á–∞—Ç—É"

    chat_name.short_description = "–ù–∞–∑–≤–∞ —á–∞—Ç—É"

class ActionLog(models.Model):
    chats_names = models.ForeignKey(Chats, on_delete=models.CASCADE)
    user_id = models.BigIntegerField()
    username = models.CharField(max_length=255, null=True, blank=True)
    action_type = models.CharField(max_length=50)  # –ù–∞–ø—Ä–∏–∫–ª–∞–¥: 'spam_deleted', 'user_muted'
    message = models.ForeignKey(
        Message,
        on_delete=models.CASCADE,
        related_name='action_logs',
        null=True,
        blank=True )
    info = models.TextField(null=True, blank=True)  # –î–æ–¥–∞–Ω–µ –ø–æ–ª–µ –¥–ª—è –∑–±–µ—Ä—ñ–≥–∞–Ω–Ω—è –¥–µ—Ç–∞–ª–µ–π –¥—ñ—ó
    created_at = models.DateTimeField(auto_now_add=True)

    def __str__(self):
        return f"{self.action_type} - {self.username or self.user_id} ({self.created_at})"

    class Meta:
        verbose_name = "–ñ—É—Ä–Ω–∞–ª –¥—ñ–π"
        verbose_name_plural = "–ñ—É—Ä–Ω–∞–ª–∏ –¥—ñ–π"




class User(models.Model):
    chats_names = models.ForeignKey('Chats', on_delete=models.CASCADE)
    user_id = models.BigIntegerField(unique=True)
    first_name = models.CharField(max_length=255, blank=True, null=True)

    is_banned = models.BooleanField(default=False)
    is_muted = models.BooleanField(default=False)
    mute_count = models.IntegerField(default=0)
    mute_until = models.DateTimeField(null=True, blank=True)
    banned_at = models.DateTimeField(null=True, blank=True)

    status = models.CharField(max_length=50, null=True, blank=True)

    message_count = models.IntegerField(default=0)
    last_message_date = models.DateTimeField(null=True, blank=True)

    class Meta:
        unique_together = ('user_id', 'chats_names')
        verbose_name = "–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á"
        verbose_name_plural = "–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ"
        ordering = ['-last_message_date']

    def __str__(self):
        return f"User: {self.user_id} in Chat: {self.chats_names.name}"

    def chat_name(self):
        return self.chats_names.name if self.chats_names else "–ë–µ–∑ —á–∞—Ç—É"

    chat_name.short_description = "–ù–∞–∑–≤–∞ —á–∞—Ç—É"

    @sync_to_async
    def save_async(self):
        self.save()

    async def ban(self):
        self.is_banned = True
        self.banned_at = now()
        await self.save_async()

    async def unban(self):
        self.is_banned = False
        self.banned_at = None
        await self.save_async()

    async def mute(self, mute_duration):
        self.is_muted = True
        self.mute_until = now() + mute_duration
        self.mute_count += 1
        await self.save_async()

    async def unmute(self):
        self.is_muted = False
        self.mute_until = None
        await self.save_async()

    async def update_message_count(self):
        self.message_count += 1
        self.last_message_date = now()
        await self.save_async()

    def get_status(self):
        if self.is_banned:
            return "–ó–∞–±–ª–æ–∫–æ–≤–∞–Ω–æ"
        if self.is_muted and self.mute_until:
            return f"–ó–∞–º—É—á–µ–Ω–æ –¥–æ {self.mute_until.strftime('%Y-%m-%d %H:%M:%S')}"
        return self.status or "–ê–∫—Ç–∏–≤–Ω–∏–π"




