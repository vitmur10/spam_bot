import asyncio
from datetime import datetime, timedelta

from aiogram import Router, F
from aiogram import types
from aiogram.types import Message
from aiogram.types import ChatPermissions

from const import *

router = Router()
ChatPermissions(can_send_messages=False)

banned_users = []
muted_users = []


@router.message(
    F.new_chat_members |  # –î–æ–¥–∞–≤–∞–Ω–Ω—è –Ω–æ–≤–æ–≥–æ —É—á–∞—Å–Ω–∏–∫–∞
    F.left_chat_member |  # –í–∏—Ö—ñ–¥/–≤–∏–¥–∞–ª–µ–Ω–Ω—è —É—á–∞—Å–Ω–∏–∫–∞
    F.pinned_message |  # –ó–∞–∫—Ä—ñ–ø–ª–µ–Ω–Ω—è –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
    F.migrate_to_chat_id |  # –û–Ω–æ–≤–ª–µ–Ω–Ω—è –¥–æ —Å—É–ø–µ—Ä–≥—Ä—É–ø–∏
    F.migrate_from_chat_id |  # –û–Ω–æ–≤–ª–µ–Ω–Ω—è –¥–æ —Å—É–ø–µ—Ä–≥—Ä—É–ø–∏ (–∑–º—ñ–Ω–∞ ID)
    F.group_chat_created |  # –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –≥—Ä—É–ø–æ–≤–æ–≥–æ —á–∞—Ç—É
    F.supergroup_chat_created |  # –°—Ç–≤–æ—Ä–µ–Ω–Ω—è —Å—É–ø–µ—Ä–≥—Ä—É–ø–∏
    F.channel_chat_created |  # –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –∫–∞–Ω–∞–ª—É
    F.message_auto_delete_timer_changed |  # –ó–º—ñ–Ω–∞ —Ç–∞–π–º–µ—Ä–∞ –∞–≤—Ç–æ-–≤–∏–¥–∞–ª–µ–Ω–Ω—è –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å
    F.chat_shared |  # –ü–æ–¥—ñ–ª–∏—Ç–∏—Å—è —á–∞—Ç–æ–º
    F.chat_invite_link |  # –ù–∞–¥—ñ—Å–ª–∞–Ω–æ —ñ–Ω–≤–∞–π—Ç-–ø–æ—Å–∏–ª–∞–Ω–Ω—è
    F.chat_photo |  # –î–æ–¥–∞–Ω–æ/–∑–º—ñ–Ω–µ–Ω–æ —Ñ–æ—Ç–æ —á–∞—Ç—É
    F.chat_title  # –ó–º—ñ–Ω–µ–Ω–æ –Ω–∞–∑–≤—É —á–∞—Ç—É
)
async def delete_service_messages(message: Message, bot: Bot):
    """–í–∏–¥–∞–ª—è—î –≤—Å—ñ —Ç–µ—Ö–Ω—ñ—á–Ω—ñ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è —É –≥—Ä—É–ø—ñ/—á–∞—Ç—ñ."""
    await bot.delete_message(message.chat.id, message.message_id)


async def is_admin(chat_id, user_id):
    # –û—Ç—Ä–∏–º–∞–Ω–Ω—è —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—ó –ø—Ä–æ —É—á–∞—Å–Ω–∏–∫–∞ —á–∞—Ç—É
    member = await bot.get_chat_member(chat_id, user_id)

    # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞, —á–∏ —î –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º –∞–±–æ –≤–ª–∞—Å–Ω–∏–∫–æ–º —á–∞—Ç—É
    if member.status in ['administrator', 'creator']:
        return True
    return False


# –û–±—Ä–æ–±–Ω–∏–∫ –¥–ª—è –∫–æ–º–∞–Ω–¥–∏ /ban

@router.message(F.text.startswith('/ban'))
async def ban_user(message: Message, bot: Bot):
    # Check if the user is an admin
    if not await is_admin(message.chat.id, message.from_user.id):
        await message.answer("–¢—ñ–ª—å–∫–∏ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∏ –º–æ–∂—É—Ç—å –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–≤–∞—Ç–∏ —Ü—é –∫–æ–º–∞–Ω–¥—É.")
        return

    # Ensure the command is a reply to a message
    if not message.reply_to_message:
        await message.answer("–¶—è –∫–æ–º–∞–Ω–¥–∞ –º–∞—î –±—É—Ç–∏ –≤—ñ–¥–ø–æ–≤—ñ–¥–¥—é –Ω–∞ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è!")
        return

    user_id = message.reply_to_message.from_user.id
    user_first_name = message.reply_to_message.from_user.first_name

    # Ban the user
    await bot.ban_chat_member(message.chat.id, user_id)

    # Add user to the banned users database
    BannedUser.objects.create(user_id=user_id, first_name=user_first_name)

    # Send confirmation message
    await message.answer(f'–ü–æ–∫–∏–Ω—É–≤ –Ω–∞—Å: {user_first_name}')


# –û–±—Ä–æ–±–Ω–∏–∫ –¥–ª—è –∫–æ–º–∞–Ω–¥–∏ /unban
@router.message(F.text == '/unban')
async def unban_user(message: types.Message):
    user_id = message.reply_to_message.from_user.id

    try:
        banned_user = BannedUser.objects.get(user_id=user_id)
        await bot.unban_chat_member(message.chat.id, user_id)
        banned_user.delete()  # Remove from the database
        await message.answer(f"–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á {user_id} —Ä–æ–∑–±–ª–æ–∫–æ–≤–∞–Ω–∏–π.")
    except BannedUser.DoesNotExist:
        await message.answer(f"–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á {user_id} –Ω–µ –±—É–≤ –∑–∞–±–∞–Ω–µ–Ω–∏–π.")


# –û–±—Ä–æ–±–Ω–∏–∫ –¥–ª—è –∫–æ–º–∞–Ω–¥–∏ /mute
@router.message(F.text.startswith('/mute'))
async def mute_user(message: Message, bot: Bot):
    # Check if the user is an admin
    if not await is_admin(message.chat.id, message.from_user.id):
        await message.answer("–¢—ñ–ª—å–∫–∏ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∏ –º–æ–∂—É—Ç—å –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–≤–∞—Ç–∏ —Ü—é –∫–æ–º–∞–Ω–¥—É.")
        return

    # Ensure the command is a reply to a message
    if not message.reply_to_message:
        await message.answer("–¶—è –∫–æ–º–∞–Ω–¥–∞ –º–∞—î –±—É—Ç–∏ –≤—ñ–¥–ø–æ–≤—ñ–¥–¥—é –Ω–∞ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è!")
        return

    try:
        muteint = int(message.text.split()[1])  # –úute duration
        mutetype = message.text.split()[2]  # Time unit (hour, minute, day)
        comment = " ".join(message.text.split()[3:])  # Reason for mute
    except IndexError:
        await message.answer('–ë—Ä–∞–∫—É—î –∞—Ä–≥—É–º–µ–Ω—Ç—ñ–≤! –ü—Ä–∏–∫–ª–∞–¥: `/mute 1 —Ö–≤–∏–ª–∏–Ω–∞ –ø—Ä–∏—á–∏–Ω–∞`')
        return

    # Calculate mute end time
    if mutetype in ["–≥", "–≥–æ–¥–∏–Ω", "–≥–æ–¥–∏–Ω–∞"]:
        dt = datetime.now() + timedelta(hours=muteint)
    elif mutetype in ["—Ö", "—Ö–≤–∏–ª–∏–Ω", "—Ö–≤–∏–ª–∏–Ω–∏"]:
        dt = datetime.now() + timedelta(minutes=muteint)
    elif mutetype in ["–¥", "–¥–Ω—ñ–≤", "–¥–µ–Ω—å"]:
        dt = datetime.now() + timedelta(days=muteint)
    else:
        await message.answer("–ù–µ–≤—ñ–¥–æ–º–∏–π —Ç–∏–ø —á–∞—Å—É. –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ '–≥', '—Ö' –∞–±–æ '–¥'.")
        return

    # Mute the user
    timestamp = dt.timestamp()
    await bot.restrict_chat_member(
        message.chat.id,
        message.reply_to_message.from_user.id,
        types.ChatPermissions(can_send_messages=False),
        until_date=timestamp
    )

    # Add muted user to the database
    MutedUser.objects.create(
        user_id=message.reply_to_message.from_user.id,
        first_name=message.reply_to_message.from_user.first_name,
        end_time=dt
    )

    # Send confirmation
    await message.answer(
        f' | <b>–†—ñ—à–µ–Ω–Ω—è –±—É–ª–æ –ø—Ä–∏–π–Ω—è—Ç–µ:</b> {message.from_user.get_mention(as_html=True)}\n'
        f' | <b>–ü–æ—Ä—É—à–Ω–∏–∫:</b> <a href="tg://user?id={message.reply_to_message.from_user.id}">{message.reply_to_message.from_user.first_name}</a>\n'
        f'‚è∞ | <b>–¢–µ—Ä–º—ñ–Ω –ø–æ–∫–∞—Ä–∞–Ω–Ω—è:</b> {muteint} {mutetype}\n'
        f' | <b>–ü—Ä–∏—á–∏–Ω–∞:</b> {comment}',
        parse_mode='html'
    )


# –û–±—Ä–æ–±–Ω–∏–∫ –¥–ª—è –∫–æ–º–∞–Ω–¥–∏ /unmute
@router.message(F.text == '/unmute')
async def unmute_user(message: types.Message):
    user_id = message.reply_to_message.from_user.id

    try:
        muted_user = MutedUser.objects.get(user_id=user_id)
        await bot.restrict_chat_member(message.chat.id, user_id, can_send_messages=True)
        muted_user.delete()  # Remove from the database
        await message.answer(f"–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á {user_id} —Ä–æ–∑–º—É—á–µ–Ω–∏–π.")
    except MutedUser.DoesNotExist:
        await message.answer(f"–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á {user_id} –Ω–µ –±—É–≤ –∑–∞–º—É—á–µ–Ω–∏–π.")


# –û–±—Ä–æ–±–Ω–∏–∫ –¥–ª—è –∫–æ–º–∞–Ω–¥–∏ /banned_list
@router.message(F.text == '/banned_list')
async def banned_list(message: types.Message):
    banned_users = BannedUser.objects.all()
    if banned_users:
        banned_list_str = ""
        for user in banned_users:
            banned_list_str += f"üö´ Name: {user.first_name}, –ó–∞–±–∞–Ω–µ–Ω–∏–π: {user.banned_at.strftime('%Y-%m-%d %H:%M:%S')}\n"
        await message.answer(f"–ó–∞–±–∞–Ω–µ–Ω—ñ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ:\n{banned_list_str}")
    else:
        await message.answer("–ù–µ–º–∞—î –∑–∞–±–∞–Ω–µ–Ω–∏—Ö –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤.")


# –û–±—Ä–æ–±–Ω–∏–∫ –¥–ª—è –∫–æ–º–∞–Ω–¥–∏ /muted_list
@router.message(F.text == '/muted_list')
async def muted_list(message: types.Message):
    muted_users = MutedUser.objects.all()
    if muted_users:
        muted_list_str = ""
        for user in muted_users:
            muted_list_str += f"üßë‚Äçü¶∞ Name: {user.first_name}, –ú—É—Ç –¥–æ: {user.end_time.strftime('%Y-%m-%d %H:%M:%S')}\n"
        await message.answer(f"–ó–∞–º—É—á–µ–Ω—ñ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ:\n{muted_list_str}")
    else:
        await message.answer("–ù–µ–º–∞—î –∑–∞–º—É—á–µ–Ω–∏—Ö –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤.")


@router.message(F.text.startswith('/kik'))
async def unban_user(message: Message, bot: Bot):
    # Check if the user is an admin
    if not await is_admin(message.chat.id, message.from_user.id):
        await message.answer("–¢—ñ–ª—å–∫–∏ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∏ –º–æ–∂—É—Ç—å –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–≤–∞—Ç–∏ —Ü—é –∫–æ–º–∞–Ω–¥—É.")
        return

    # Ensure the command is a reply to a message
    if not message.reply_to_message:
        await message.answer("–¶—è –∫–æ–º–∞–Ω–¥–∞ –º–∞—î –±—É—Ç–∏ –≤—ñ–¥–ø–æ–≤—ñ–¥–¥—é –Ω–∞ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è!")
        return

    # Unban the user
    await bot.unban_chat_member(message.chat.id, message.reply_to_message.from_user.id)

    # Send confirmation message
    await message.answer(f'–ü–æ–∫–∏–Ω—É–≤ –Ω–∞—Å: {message.reply_to_message.from_user.first_name}')




@router.message()
async def filter_spam(message: Message, bot: Bot):
    text = message.text or ""

    # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –Ω–∞ –∑–∞–±–æ—Ä–æ–Ω–µ–Ω—ñ —Å–ª–æ–≤–∞ –¥–ª—è –ú–£–¢–ê
    if any(word in text.lower() for word in BAD_WORDS_MUTE):
        print(f"[MUTE] {message.from_user.full_name}: {text}")

        user_id = message.from_user.id
        mute_time = 10  # –ú—É—Ç –Ω–∞ 10 —Ö–≤–∏–ª–∏–Ω
        current_time = datetime.now()

        # –í–∏–¥–∞–ª—è—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
        await bot.delete_message(message.chat.id, message.message_id)

        # –ó–∞–º—É—á—É—î–º–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
        await bot.restrict_chat_member(message.chat.id, user_id, ChatPermissions(can_send_messages=False))
        # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ —á–∞—Å, –∫–æ–ª–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á –±—É–≤ –∑–∞–º—É—á–µ–Ω–∏–π
        muted_users.append({
            "user_id": user_id,
            "first_name": message.from_user.full_name,
            "end_time": current_time + timedelta(minutes=mute_time)
        })

        await message.answer(f"–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á {message.from_user.full_name} –∑–∞–º—É—á–µ–Ω–∏–π –Ω–∞ {mute_time} —Ö–≤–∏–ª–∏–Ω.")

        # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —á–µ—Ä–µ–∑ –∫–æ–∂–Ω—É —Å–µ–∫—É–Ω–¥—É, —á–∏ –Ω–∞—Å—Ç–∞–≤ —á–∞—Å –¥–ª—è —Ä–æ–∑–º—É—Ç—É
        while True:
            # –ó–Ω–∞—Ö–æ–¥–∏–º–æ –∑–∞–º—É—á–µ–Ω–æ–≥–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
            muted_user = next((user for user in muted_users if user['user_id'] == user_id), None)

            if muted_user and muted_user['end_time'] <= datetime.now():
                # –†–æ–∑–º—É—á—É—î–º–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
                await bot.restrict_chat_member(message.chat.id, user_id, ChatPermissions(can_send_messages=True))
                await message.answer(f"–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á {message.from_user.full_name} —Ä–æ–∑–º—É—á–µ–Ω–∏–π.")

                # –í–∏–¥–∞–ª—è—î–º–æ –∑–∞–ø–∏—Å –ø—Ä–æ –∑–∞–º—É—á–µ–Ω–æ–≥–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
                muted_users.remove(muted_user)
                break

            await asyncio.sleep(1)

    # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –Ω–∞ –∑–∞–±–æ—Ä–æ–Ω–µ–Ω—ñ —Å–ª–æ–≤–∞ –¥–ª—è –ö–Ü–ö–ê
    if any(word in text.lower() for word in BAD_WORDS_KICK):
        print(f"[KICK] {message.from_user.full_name}: {text}")
        await bot.delete_message(message.chat.id, message.message_id)
        await bot.ban_chat_member(message.chat.id, message.from_user.id)
        await bot.unban_chat_member(message.chat.id, message.from_user.id)  # –ö—ñ–∫ –±–µ–∑ –±–∞–Ω–∞
        return

    # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –Ω–∞ –∑–∞–±–æ—Ä–æ–Ω–µ–Ω—ñ —Å–ª–æ–≤–∞ –¥–ª—è –ë–ê–ù–£
    if any(word in text.lower() for word in BAD_WORDS_BAN):
        print(f"[BAN] {message.from_user.full_name}: {text}")
        await bot.delete_message(message.chat.id, message.message_id)
        await bot.ban_chat_member(message.chat.id, message.from_user.id)
        return

    # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –Ω–∞ –ø–æ—Å–∏–ª–∞–Ω–Ω—è
    if URL_PATTERN.search(text):
        print(f"[LINK DETECTED] {message.from_user.full_name}: {text}")
        await bot.delete_message(message.chat.id, message.message_id)
        return

    # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –Ω–∞ –≤–µ–ª–∏–∫—É –∫—ñ–ª—å–∫—ñ—Å—Ç—å @
    if text.count("@") >= MAX_MENTIONS:
        print(f"[TOO MANY MENTIONS] {message.from_user.full_name}: {text}")
        await bot.delete_message(message.chat.id, message.message_id)
        return

    # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –Ω–∞ –≤–µ–ª–∏–∫—É –∫—ñ–ª—å–∫—ñ—Å—Ç—å –µ–º–æ–¥–∑—ñ
    emoji_count = sum(1 for char in text if char in "üòÄüòÅüòÇü§£üòÉüòÑüòÖüòÜüòâüòäüòãüòéüòúüòùüòõü§™ü§©ü§Øü•≥üòáü•∞üòçüòò")
    if emoji_count >= MAX_EMOJIS:
        print(f"[TOO MANY EMOJIS] {message.from_user.full_name}: {text}")
        await bot.delete_message(message.chat.id, message.message_id)
        return

    # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –Ω–∞ –∫–∞–ø—Å
    caps_text = sum(1 for char in text if char.isupper())
    if caps_text >= MIN_CAPS_LENGTH and caps_text > len(text) * 0.7:
        print(f"[CAPS DETECTED] {message.from_user.full_name}: {text}")
        await bot.delete_message(message.chat.id, message.message_id)
        return
